<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:encryption="http://www.jasypt.org/schema/encryption" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
				http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
                http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.1.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                http://www.springframework.org/schema/security
				http://www.springframework.org/schema/security/spring-security-3.1.xsd
				http://www.jasypt.org/schema/encryption
                http://www.jasypt.org/schema/encryption/jasypt-spring31-encryption-1.xsd
                http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd">

	<context:component-scan base-package="com.versacomllc.training" />
	<context:component-scan base-package="com.versacomllc.training.controller" />

	<context:component-scan base-package="com.versacomllc.training.controller"
		use-default-filters="false">
		
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<encryption:encryptable-properties
		id="appProperties" encryptor="propsEncryptor" location="WEB-INF/conf/application.properties" />


	<!-- Activate Spring bean validation -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<bean id="propsEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="peConfig" />
	</bean>

	<bean id="peConfig"
		class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWithMD5AndTripleDES" />

		<property name="passwordEnvName" value="PE_CONF_PWD" />

		<!-- This should be removed when deployed on linux machine and enabled 
			above -->
		 <property name="password" value="zaqzaq45" />

	</bean>

	<context:annotation-config />

	<aop:aspectj-autoproxy />

<!-- 
	<bean id="threadPoolTaskScheduler"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
		<property name="poolSize" value="10" />
	</bean> -->
	<!-- <task:scheduler id="notificationScheduler" pool-size="10" /> <task:annotation-driven 
		scheduler="notificationScheduler" /> -->

	<!-- Activates @Scheduled and @Async annotations for scheduling -->
	<task:annotation-driven executor="executorWithPoolSizeRange"
		scheduler="taskScheduler" />

	<!-- The 'executor' element: When a task is submitted, the executor will 
		first try to use a free thread if the number of active threads is currently 
		less than the core size. If the core size has been reached, then the task 
		will be added to the queue as long as its capacity has not yet been reached. 
		Only then, if the queue's capacity has been reached, will the executor create 
		a new thread beyond the core size. If the max size has also been reached, 
		then the executor will reject the task See: 25.4.2 The 'executor' element -->
	<!-- Defines a ThreadPoolTaskExecutor instance with configurable pool size, 
		queue-capacity, keep-alive, and rejection-policy values. The id becomes the 
		default thread name prefix -->
	<task:executor id="executorWithPoolSizeRange" pool-size="5-25"
		queue-capacity="100" />

	<!-- Defines a ThreadPoolTaskScheduler instance with configurable pool size. 
		The id becomes the default thread name prefix. -->
	<task:scheduler id="taskScheduler" pool-size="10" />

</beans>